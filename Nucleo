/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include <stdio.h>
#include "fatfs_sd.h"
#include "string.h"
#include "stdio.h"
#include "ili9341.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
//variables bandera de las interrupciones
uint8_t bot1 = 0;
uint8_t bot2 = 0;

//definicion de variables que se utilizan
uint8_t bufferUart [5];
uint16_t valorSensor;
extern uint8_t night[];
extern uint8_t day[];
extern uint8_t menuUP[];
char buff[30];
char buff1[30];

//definiciones SPI SD
SPI_HandleTypeDef hspi1;
FATFS fs;
FATFS *pfs;
FIL fil;
FRESULT fres;
DWORD fre_clust;
uint32_t totalSpace, freeSpace;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_UART5_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void transmit_uart(char *message);
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_UART5_Init();
  MX_FATFS_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */

  //encender LCD TFT
  LCD_Init();

  //limppiar LCD tft
  LCD_Clear(0x00);

  //llenar fondo de pantalla de color cafe parecido
  FillRect(0, 0, 319, 239, 0x5a26);

  //Mostrar imagen principal
  LCD_Bitmap(0, 29, 320, 180, menuUP);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //si se presiona el boton1
	  if(bot1 == 1){
		  //enviar valor para indicarle al esp32 que mande el dato del sensor
		  uint8_t opcion1 = '1';
		  HAL_UART_Transmit(&huart5, &opcion1, sizeof(opcion1), 100);

		  //limpiar bufferUart y buff
		  memset(bufferUart, 0, sizeof(bufferUart));
		  memset(buff, 0, sizeof(buff));
		  //recibir dato del esp32
		  if (HAL_UART_Receive(&huart5, &bufferUart[0] , 2, HAL_MAX_DELAY) == HAL_OK){
			  //Se guarda en valorSensor los dos bytes que se reciben
			  valorSensor = (bufferUart[0] << 8) | bufferUart[1];
			  //Si hay cierto valor de luz
			  if(valorSensor > 100){
				  //genera imagen de dia con fondo celeste
				  FillRect(0, 0, 319, 239, 0x155b);
				  LCD_Bitmap(39, 0, 240, 240, day);
				  //guarda valorSensor en variable buff con mensaje para mostrar en uart2
				  sprintf(buff, "Valor Medido: %d lx\r\n", valorSensor);
				  //guarda valorSensor en variable buff1 con mensaje para mostrar en TFT
				  sprintf(buff1, "Valor Medido: %d lx", valorSensor);
				  //Imprime mensaje de 'Intensidad Luminica' en pantalla TFT
				  LCD_Print("Intensidad", 80, 85, 1, 0x0000, 0xaf3e);
				  LCD_Print("Luminica", 164, 85, 1, 0x0000, 0xaf3e);
				  //Imprime buff1 en pantalla TFT
				  LCD_Print(buff1, 80, 96, 1, 0x0000, 0xaf3e);
				  //muestra valor buff en terminal serial de compu Uart2
				  HAL_UART_Transmit(&huart2, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);
			  }
			  else {
				  //genera imagen de noche con fondo azul oscuro
				  FillRect(0, 0, 319, 239, 0x0023);
				  LCD_Bitmap(39, 0, 240, 240, night);
				  //guarda valorSensor en variable buff con mensaje para mostrar en uart2
				  sprintf(buff, "Valor Medido: %d lx\r\n", valorSensor);
				  //guarda valorSensor en variable buff1 con mensaje para mostrar en TFT
				  sprintf(buff1, "Valor Medido: %d lx", valorSensor);
				  //Imprime mensaje de 'Intensidad Luminica' en pantalla TFT
				  LCD_Print("Intensidad", 80, 85, 1, 0xffff, 0x2189);
				  LCD_Print("Luminica", 164, 85, 1, 0xffff, 0x2189);
				  //Imprime buff1 en pantalla TFT
				  LCD_Print(buff1, 80, 96, 1, 0xffff, 0x2189);
				  //muestra valor buff en terminal serial de compu Uart2
				  HAL_UART_Transmit(&huart2, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);
			  }
		  }
		  //reinicia variable bandera de boton1
		  bot1 = 0;

	  }
	  //si se presiona el boton2
	  if(bot2 == 1){
		  //enviar valor para indicarle al esp32 que mande el dato del sensor
		  uint8_t opcion2 = '2';
		  HAL_UART_Transmit(&huart5, &opcion2, sizeof(opcion2), HAL_MAX_DELAY);

		  //limpiar bufferUart y buff
		  memset(bufferUart, 0, sizeof(bufferUart));
		  memset(buff, 0, sizeof(buff));
		  //recibir dato del esp32
		  if (HAL_UART_Receive(&huart5, &bufferUart[0] , 2, HAL_MAX_DELAY) == HAL_OK){
			  //Se guarda en valorSensor los dos bytes que se reciben
			  valorSensor = (bufferUart[0] << 8) | bufferUart[1];
			  //guarda valorSensor en variable buff con mensaje para guardar en SD
			  sprintf(buff, "Valor Medido: %d lx\r\n", valorSensor);
			  if(valorSensor > 100){
				  //genera imagen de dia con fondo celeste
				  FillRect(0, 0, 319, 239, 0x155b);
				  LCD_Bitmap(39, 0, 240, 240, day);
				  //guarda valorSensor en variable buff con mensaje para mostrar en uart2
				  sprintf(buff, "Valor Medido: %d lx\r\n", valorSensor);
				  //guarda valorSensor en variable buff1 con mensaje para mostrar en TFT
				  sprintf(buff1, "Valor Medido: %d lx", valorSensor);
				  //Imprime mensaje de 'Intensidad Luminica' en pantalla TFT
				  LCD_Print("Intensidad", 80, 85, 1, 0x0000, 0xaf3e);
				  LCD_Print("Luminica", 164, 85, 1, 0x0000, 0xaf3e);
				  //Imprime buff1 en pantalla TFT
				  LCD_Print(buff1, 80, 96, 1, 0x0000, 0xaf3e);
			  }
			  else {
				  //genera imagen de noche con fondo azul oscuro
				  FillRect(0, 0, 319, 239, 0x0023);
				  LCD_Bitmap(39, 0, 240, 240, night);
				  //guarda valorSensor en variable buff1 con mensaje para mostrar en TFT
				  sprintf(buff1, "Valor Medido: %d lx", valorSensor);
				  //Imprime mensaje de 'Intensidad Luminica' en pantalla TFT
				  LCD_Print("Intensidad", 80, 85, 1, 0xffff, 0x2189);
				  LCD_Print("Luminica", 164, 85, 1, 0xffff, 0x2189);
				  //Imprime buff1 en pantalla TFT
				  LCD_Print(buff1, 80, 96, 1, 0xffff, 0x2189);
			  }
			  //montar el archivo
			  fres = f_mount(&fs, "/", 0);
			  if (fres == FR_OK) {
				  transmit_uart("\n Micro SD card is mounted successfully!\n");
			  }
			  else if (fres != FR_OK) {
				  transmit_uart("Micro SD card's mount error!\n");
			  }
			  //abrir el archivo
			  fres = f_open(&fil, "Prueba.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
			  if (fres == FR_OK) {
				  transmit_uart("File opened for reading.\n");
			  }
			  else if (fres != FR_OK) {
				  transmit_uart("File was not opened for reading!\n");
			  }
			  //Guardar buff en SD
			  f_puts(buff, &fil);
			  //cerrar el archivo
			  fres = f_close(&fil);
			  if (fres == FR_OK) {
				  transmit_uart("The file is closed.\n");
			  }
			  else if (fres != FR_OK) {
				  transmit_uart("The file was not closed.\n");
			  }
			  //desmontar la SD
			  f_mount(NULL, "", 1);
			  if (fres == FR_OK) {
				  transmit_uart("The Micro SD card is unmounted!\n");
			  }
			  else if (fres != FR_OK) {
				  transmit_uart("The Micro SD was not unmounted!");
			  }
		  }
		  //reinicia bandera de boton2
		  bot2 = 0;
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
  huart5.Init.BaudRate = 115200;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart5) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
                          |LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : boton1_Pin boton2_Pin */
  GPIO_InitStruct.Pin = boton1_Pin|boton2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
                          |LCD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
//interrupcion de cuando se apacha un boton
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	//si se presiona el boton1, se activa una bandera
	if(HAL_GPIO_ReadPin(boton1_GPIO_Port, boton1_Pin) == 1){
		bot1 = 1;
	}
	//si se presiona el boton2, se activa otra bandera
	if(HAL_GPIO_ReadPin(boton2_GPIO_Port, boton2_Pin) == 1){
		bot2 = 1;
	}
}

//funcion que se utiliza para tranmitir al Uart 2 para mostrar progreso del SD
void transmit_uart(char *message) {
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
