/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include <stdio.h>
#include "fatfs_sd.h"
#include "string.h"
#include "stdio.h"

#include "ili9341.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
uint8_t bot1 = 0;
uint8_t bot2 = 0;
uint8_t bandera = 0;

uint8_t bufferUart [5];
uint16_t valorSensor;
extern uint8_t night[];
extern uint8_t day[];
extern uint8_t menuUP[];

//definiciones SPI SD
SPI_HandleTypeDef hspi1;
FATFS fs;
FATFS *pfs;
FIL fil;
FRESULT fres;
DWORD fre_clust;
uint32_t totalSpace, freeSpace;
char buffer[100];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_UART5_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void transmit_uart(char *message);
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_UART5_Init();
  MX_FATFS_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */


  LCD_Init();

  LCD_Clear(0x00);
  //FillRect(0, 0, 319, 239, 0xFFFF);

  //LCD_Bitmap(0, 0, 320, 240, fondo);
  //azul
  //FillRect(0, 0, 319, 239, 0x0023);

  //celeste
 // FillRect(0, 0, 319, 239, 0x155b);

  //cafe
  FillRect(0, 0, 319, 239, 0x5a26);

  //LCD_Bitmap(39, 0, 240, 240, day);
  LCD_Bitmap(0, 29, 320, 180, menuUP);
  //LCD_Print("Hola Mundo", 20, 100, 1, 0x001F, 0xCAB9);

  char buff[30];
  char buff1[30];

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
  {
	  //si se presiona el boton1
	  if(bot1 == 1){
		  //enviar valor para indicarle al esp32 que mande el dato del sensor
		  uint8_t opcion1 = '1';
		  HAL_UART_Transmit(&huart5, &opcion1, sizeof(opcion1), 100);
		  HAL_UART_Transmit(&huart2, &opcion1, sizeof(opcion1), 100);

		  memset(bufferUart, 0, sizeof(bufferUart));
		  memset(buff, 0, sizeof(buff));
		  //recibir dato del esp32
		  if (HAL_UART_Receive(&huart5, &bufferUart[0] , 2, HAL_MAX_DELAY) == HAL_OK){
			  valorSensor = (bufferUart[0] << 8) | bufferUart[1];
			  //Si hay luz
			  if(valorSensor > 100){
				  //genera imagen de dia
				  FillRect(0, 0, 319, 239, 0x155b);
				  LCD_Bitmap(39, 0, 240, 240, day);
				  sprintf(buff, "Valor Medido: %d lx\r\n", valorSensor);
				  sprintf(buff1, "Valor Medido: %d lx", valorSensor);
				  LCD_Print("Intensidad", 80, 85, 1, 0x0000, 0xaf3e);
				  LCD_Print("Luminica", 164, 85, 1, 0x0000, 0xaf3e);
				  LCD_Print(buff1, 80, 96, 1, 0x0000, 0xaf3e);
				  HAL_UART_Transmit(&huart2, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);
			  }
			  else {
				  FillRect(0, 0, 319, 239, 0x0023);
				  LCD_Bitmap(39, 0, 240, 240, night);
				  sprintf(buff, "Valor Medido: %d lx\r\n", valorSensor);
				  sprintf(buff1, "Valor Medido: %d lx", valorSensor);
				  LCD_Print("Intensidad", 80, 85, 1, 0xffff, 0x2189);
				  LCD_Print("Luminica", 164, 85, 1, 0xffff, 0x2189);
				  LCD_Print(buff1, 80, 96, 1, 0xffff, 0x2189);
				  HAL_UART_Transmit(&huart2, (uint8_t *)buff, strlen(buff), HAL_MAX_DELAY);
			  }
		  }
		  bot1 = 0;

	  }
//si se presiona el boton2
	  if(bot2 == 1){
		  //enviar valor para indicarle al esp32 que mande el dato del sensor
		  uint8_t opcion2 = '2';
		  HAL_UART_Transmit(&huart5, &opcion2, sizeof(opcion2), HAL_MAX_DELAY);

		  memset(bufferUart, 0, sizeof(bufferUart));
		  memset(buff, 0, sizeof(buff));
		  if (HAL_UART_Receive(&huart5, &bufferUart[0] , 2, HAL_MAX_DELAY) == HAL_OK){
			  valorSensor = (bufferUart[0] << 8) | bufferUart[1];
			  //convierte bufferUart a una string con \n al final para poder mandarlo a la Sd
			  sprintf(buff, "Valor Medido: %d lx\r\n", valorSensor);

			  //montar el archivo
			  fres = f_mount(&fs, "/", 0);
			  if (fres == FR_OK) {
				  transmit_uart("\n Micro SD card is mounted successfully!\n");
			  }
			  else if (fres != FR_OK) {
				  transmit_uart("Micro SD card's mount error!\n");
			  }
			  //abrir el archivo
			  fres = f_open(&fil, "Prueba.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
			  if (fres == FR_OK) {
				  transmit_uart("File opened for reading.\n");
			  }
			  else if (fres != FR_OK) {
				  transmit_uart("File was not opened for reading!\n");
			  }
			  //escribir en el archivo
			  //for (uint8_t i = 0; i < 10; i++) {
			  // f_puts("Hola Gaby.\n", &fil);
			  //}
			  f_puts(buff, &fil);
			  //cerrar el archivo
			  fres = f_close(&fil);
			  if (fres == FR_OK) {
				  transmit_uart("The file is closed.\n");
			  }
			  else if (fres != FR_OK) {
				  transmit_uart("The file was not closed.\n");
			  }
			  //desmontar la SD
			  f_mount(NULL, "", 1);
			  if (fres == FR_OK) {
				  transmit_uart("The Micro SD card is unmounted!\n");
			  }
			  else if (fres != FR_OK) {
				  transmit_uart("The Micro SD was not unmounted!");
			  }
		  }
		  bot2 = 0;
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
