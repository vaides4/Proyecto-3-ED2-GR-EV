#include <Arduino.h>
#include <Adafruit_NeoPixel.h>
#include <BH1750.h>
#include <Wire.h>

//pin de conexion del neopixel
#define neoPixelPin 27

//cantidad de neopixeles
#define numPixeles 16

//definicion de variable a utilizar con libreria
Adafruit_NeoPixel pixels(numPixeles, neoPixelPin, NEO_BGR + NEO_KHZ800);

//direccion I2C del sensor
BH1750 lightMeter(0x23);

//funcion mantener pixels encendidos
void pixelOn(int colorPix);

//funcion encender pixels uno por uno
void pixelLoading(int colorRed, int colorGreen, int colorBlue);

//variable de opcion a realizar
uint8_t opcion;

//buffer utilizado para mandar valor de sensor de dos bytes
uint8_t dataToSend[2];

//variable utilizada para guardar el valor del sensor
int lux;

void setup() {
  //Comenzar monitor serial
  Serial.begin(115200);

  //Inicializar I2C bus
  Wire.begin();

  //comenzar serial 2
  Serial2.begin(115200);

  //comenzar neopixel
  pixels.begin();

  //Apaga colores del pixel
  pixels.clear();

  //Pixels modo encendido 
  pixelOn(250);

  //condicion if para detectar si hay problemas para inicializar el sensor I2C
  if (lightMeter.begin(BH1750::CONTINUOUS_HIGH_RES_MODE)) {
    Serial.println(F("BH1750 Advanced begin"));
  } 
  else {
    Serial.println(F("Error initialising BH1750"));
  }

}

void loop() {
  //codigo solo corre si se detecta algo en Uart enviado desde el nucleo
  if(Serial2.available() > 0){
    //se lee la opcion escogida enviada desde nucleo en Uart
    opcion = Serial2.read();

    //Si el sensor detecta un nuevo valor de medicion
    if (lightMeter.measurementReady()) {
      //guarda valor en variable luz
      lux = lightMeter.readLightLevel();
    }
    //guarda valor en dos bytes por que puede llegar a ser mÃ¡s de 8 bits
    dataToSend[0] = (lux >> 8) & 0xFF;
    dataToSend[1] = lux & 0xFF; 

    //si el usuario elige la opcion 1
    if(opcion == 49){
      //funcion para mostrar que esta cargando opcion 1 con neopixel
      pixelLoading(200, 0, 200);
      //envia dato de sensor en Uart con dos bytes
      Serial2.write(dataToSend, 2);
      //neopixels vuelve a modo encendido
      pixelOn(250);
    }
    //si el usuario elije la opcion 2
    if(opcion == 50){
      //funcion para mostrar que esta cargando opcion 2 con neopixel
      pixelLoading(255, 165, 0);
      //envia dato de sensor en Uart con dos bytes
      Serial2.write(dataToSend, 2);
      //neopixels vuelve a modo encendido
      pixelOn(250);
    }
  }
}

//funcion para mostrar que esta cargando el programa basado en la opcion que se escoge con neopixels con un mayor delay
void pixelLoading(int colorBlue, int colorRed, int colorGreen){
  for(int i = 0; i < numPixeles; i++){
    pixels.setPixelColor(i, pixels.Color(colorBlue, colorRed, colorGreen));
    pixels.show();
    delay(250);
  }
}

//funcion para mostrar el modo encendido del programa con las neopixels con poco delay
void pixelOn(int colorChoice){
  for(int i = 0; i < numPixeles; i++){
    pixels.setPixelColor(i, pixels.Color(0, 0, colorChoice));
    pixels.show();
    delay(20);
  }
}
