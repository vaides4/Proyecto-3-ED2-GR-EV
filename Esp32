#include <Arduino.h>
#include <Adafruit_NeoPixel.h>
#include <Wire.h>

//pin de conexion del neopixel
#define neoPixelPin 27

//cantidad de neopixeles
#define numPixeles 16

//Pin potenciometro
#define pot 36

//definicion de variable a utilizar con libreria
Adafruit_NeoPixel pixels(numPixeles, neoPixelPin, NEO_BGR + NEO_KHZ800);

//direccion I2C
#define I2C_DEV_ADDR 0x55

//declaracion funciones de callbacks para I2C
void onRequest();
void onRecieve(int len);

//funcion mantener pixels encendidos
void pixelOn(int colorPix);
//funcion encender pixels uno por uno
void pixelLoading(int colorPix);

//variable de opcion
uint8_t opcion;

//variable para leer potenciometro
uint16_t valorPot1;

//mapeo potenciometro
uint16_t mapPot1;
uint8_t dataToSend[2];

//variable como bandera para enviar datos I2C
bool enviar = false;

//variable que recibe info I2C
uint8_t sensorI2C;

void setup() {
  //Comenzar monitor serial
  Serial.begin(115200);

  //comenzar serial 2
  Serial2.begin(115200);

  //comenzar neopixel
  pixels.begin();

  //Setup I2C
  Serial.setDebugOutput(true);
  Wire.onReceive(onRecieve);
  Wire.begin((u_int8_t)I2C_DEV_ADDR);

}

void loop() {
  //Apaga colores del pixel
  pixels.clear();

  //Pixels modo encendido 
  pixelOn(50);
  
  //lectura valor analogico
  valorPot1 = analogRead(pot);
  
  //mapeo valor analogico
  mapPot1 = map(valorPot1, 0, 4095, 0, 1000);

  if(Serial2.available() > 0){
    opcion = Serial2.read();
    Serial.print("Recibido: ");
    Serial.println(opcion);

    dataToSend[0] = (mapPot1 >> 8) & 0xFF;
    dataToSend[1] = mapPot1 & 0xFF; 

    if(opcion == 49){
      pixelLoading(150);
      Serial2.write(dataToSend, 2);
      Serial.println("Opcion1");
      Serial.println(mapPot1);
    }
    if(opcion == 50){
      pixelLoading(255);
      Serial2.write(dataToSend, 2);
      Serial.println("Opcion2");
      Serial.println(mapPot1);
    }
  }
}


//funcion para recibir I2C
void onRecieve(int len){
  //while para que lea datos siempre que existan
  while(Wire.available()){
    //lecura de I2C
    sensorI2C = Wire.read();

  }
}

void pixelLoading(int colorPix){
  for(int i = 0; i < numPixeles; i++){
    pixels.setPixelColor(i, pixels.Color(colorPix, 0, 0));
    pixels.show();
  }
  delay(250);
}

void pixelOn(int colorChoice){
  for(int i = 0; i < numPixeles; i++){
    pixels.setPixelColor(i, pixels.Color(colorChoice, 0, 0));
    pixels.show();
  }
  delay(20);
}
